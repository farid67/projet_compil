Terminaux inutilisés dans la grammaire

   IF
   ELSE
   WHILE
   FOR
   STENCIL
   PRINTF
   PRINTI


État 31 conflits: 1 décalage/réduction


Grammaire

    0 $accept: stenc $end

    1 stenc: en_tete prg

    2 en_tete: %empty
    3        | en_tete CONST INT ID '=' NUMERO ';'

    4 prg: INT MAIN '(' ')' '{' liste_inst '}'

    5 liste_inst: %empty
    6           | liste_inst instruction

    7 instruction: INT declaration ';'
    8            | RETURN expr ';'

    9 declaration: ID '=' expr
   10            | ID
   11            | declaration ',' declaration

   12 expr: ID
   13     | NUMERO


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'(' (40) 4
')' (41) 4
',' (44) 11
';' (59) 3 7 8
'=' (61) 3 9
'{' (123) 4
'}' (125) 4
error (256)
NUMERO (258) 3 13
ID (259) 3 9 10 12
INT (260) 3 4 7
CONST (261) 3
IF (262)
ELSE (263)
WHILE (264)
FOR (265)
STENCIL (266)
PRINTF (267)
PRINTI (268)
MAIN (269) 4
RETURN (270) 8


Non-terminaux, suivis des règles où ils apparaissent

$accept (23)
    à gauche: 0
stenc (24)
    à gauche: 1, à droite: 0
en_tete (25)
    à gauche: 2 3, à droite: 1 3
prg (26)
    à gauche: 4, à droite: 1
liste_inst (27)
    à gauche: 5 6, à droite: 4 6
instruction (28)
    à gauche: 7 8, à droite: 6
declaration (29)
    à gauche: 9 10 11, à droite: 7 11
expr (30)
    à gauche: 12 13, à droite: 8 9


État 0

    0 $accept: . stenc $end

    $défaut  réduction par utilisation de la règle 2 (en_tete)

    stenc    aller à l'état 1
    en_tete  aller à l'état 2


État 1

    0 $accept: stenc . $end

    $end  décalage et aller à l'état 3


État 2

    1 stenc: en_tete . prg
    3 en_tete: en_tete . CONST INT ID '=' NUMERO ';'

    INT    décalage et aller à l'état 4
    CONST  décalage et aller à l'état 5

    prg  aller à l'état 6


État 3

    0 $accept: stenc $end .

    $défaut  accepter


État 4

    4 prg: INT . MAIN '(' ')' '{' liste_inst '}'

    MAIN  décalage et aller à l'état 7


État 5

    3 en_tete: en_tete CONST . INT ID '=' NUMERO ';'

    INT  décalage et aller à l'état 8


État 6

    1 stenc: en_tete prg .

    $défaut  réduction par utilisation de la règle 1 (stenc)


État 7

    4 prg: INT MAIN . '(' ')' '{' liste_inst '}'

    '('  décalage et aller à l'état 9


État 8

    3 en_tete: en_tete CONST INT . ID '=' NUMERO ';'

    ID  décalage et aller à l'état 10


État 9

    4 prg: INT MAIN '(' . ')' '{' liste_inst '}'

    ')'  décalage et aller à l'état 11


État 10

    3 en_tete: en_tete CONST INT ID . '=' NUMERO ';'

    '='  décalage et aller à l'état 12


État 11

    4 prg: INT MAIN '(' ')' . '{' liste_inst '}'

    '{'  décalage et aller à l'état 13


État 12

    3 en_tete: en_tete CONST INT ID '=' . NUMERO ';'

    NUMERO  décalage et aller à l'état 14


État 13

    4 prg: INT MAIN '(' ')' '{' . liste_inst '}'

    $défaut  réduction par utilisation de la règle 5 (liste_inst)

    liste_inst  aller à l'état 15


État 14

    3 en_tete: en_tete CONST INT ID '=' NUMERO . ';'

    ';'  décalage et aller à l'état 16


État 15

    4 prg: INT MAIN '(' ')' '{' liste_inst . '}'
    6 liste_inst: liste_inst . instruction

    INT     décalage et aller à l'état 17
    RETURN  décalage et aller à l'état 18
    '}'     décalage et aller à l'état 19

    instruction  aller à l'état 20


État 16

    3 en_tete: en_tete CONST INT ID '=' NUMERO ';' .

    $défaut  réduction par utilisation de la règle 3 (en_tete)


État 17

    7 instruction: INT . declaration ';'

    ID  décalage et aller à l'état 21

    declaration  aller à l'état 22


État 18

    8 instruction: RETURN . expr ';'

    NUMERO  décalage et aller à l'état 23
    ID      décalage et aller à l'état 24

    expr  aller à l'état 25


État 19

    4 prg: INT MAIN '(' ')' '{' liste_inst '}' .

    $défaut  réduction par utilisation de la règle 4 (prg)


État 20

    6 liste_inst: liste_inst instruction .

    $défaut  réduction par utilisation de la règle 6 (liste_inst)


État 21

    9 declaration: ID . '=' expr
   10            | ID .

    '='  décalage et aller à l'état 26

    $défaut  réduction par utilisation de la règle 10 (declaration)


État 22

    7 instruction: INT declaration . ';'
   11 declaration: declaration . ',' declaration

    ';'  décalage et aller à l'état 27
    ','  décalage et aller à l'état 28


État 23

   13 expr: NUMERO .

    $défaut  réduction par utilisation de la règle 13 (expr)


État 24

   12 expr: ID .

    $défaut  réduction par utilisation de la règle 12 (expr)


État 25

    8 instruction: RETURN expr . ';'

    ';'  décalage et aller à l'état 29


État 26

    9 declaration: ID '=' . expr

    NUMERO  décalage et aller à l'état 23
    ID      décalage et aller à l'état 24

    expr  aller à l'état 30


État 27

    7 instruction: INT declaration ';' .

    $défaut  réduction par utilisation de la règle 7 (instruction)


État 28

   11 declaration: declaration ',' . declaration

    ID  décalage et aller à l'état 21

    declaration  aller à l'état 31


État 29

    8 instruction: RETURN expr ';' .

    $défaut  réduction par utilisation de la règle 8 (instruction)


État 30

    9 declaration: ID '=' expr .

    $défaut  réduction par utilisation de la règle 9 (declaration)


État 31

   11 declaration: declaration . ',' declaration
   11            | declaration ',' declaration .

    ','  décalage et aller à l'état 28

    ','       [réduction par utilisation de la règle 11 (declaration)]
    $défaut  réduction par utilisation de la règle 11 (declaration)
